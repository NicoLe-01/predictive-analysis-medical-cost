# -*- coding: utf-8 -*-
"""Proyek Predictive Analysis Medical Cost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f_xq08TyGkmH6WGais0qYZXUoXQdFnqw

Dataset : https://www.kaggle.com/datasets/mirichoi0218/insurance

Import library yang akan digunakan
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

"""Unzip dataset"""

!unzip "/content/drive/MyDrive/Dataset_Kaggle/Medical Cost Personal Datasets.zip" -d "/content/dataset"

"""Cek data"""

insurance = pd.read_csv("/content/dataset/insurance.csv")
insurance.head()

insurance.shape

insurance.describe()

insurance.info()

"""Cek apakah terdapat nilai null pada data"""

insurance.isnull().sum()

"""Dapat dilihat, tidak ada nilai null

Nilai kategorial dan nlai numerik
"""

categorical_features = ['sex', 'smoker', 'region']
numerical_features = ['age', 'bmi', 'children', 'charges']

"""Lihat pembagian data pada kolom jenis kelamin"""

feature = categorical_features[0]
count = insurance[feature].value_counts()
percent = 100 * insurance[feature].value_counts(normalize=True)
df = pd.DataFrame({'sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Cek untuk kolom smoker"""

feature = categorical_features[1]
count = insurance[feature].value_counts()
percent = 100 * insurance[feature].value_counts(normalize=True)
df = pd.DataFrame({'sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

"""Dapat dilihat pada dataset sekitar 80% pasien merupakan perokok

Cek kolom region
"""

feature = categorical_features[2]
count = insurance[feature].value_counts()
percent = 100 * insurance[feature].value_counts(normalize=True)
df = pd.DataFrame({'sampel' : count, 'persentase' : percent.round(1)})
print(df)
count.plot(kind='bar', title=feature)

cat_features = insurance.select_dtypes(include='object').columns.to_list()
for col in cat_features:
  sns.catplot(x=col, y='charges', kind='bar', dodge=False, height=4, aspect=3, data=insurance, palette='Set3')
  plt.title("Rata-rata 'charges' relatif terhadap - {}".format(col))

"""Dapat dilihat, pada fitur jenis kelamin, perbedaan tidak terlalu signifikan terhadap biaya berobat. sedangkan pada fitur smoker(perokok atau bukan) rata - rata pasien yg merokok memiliki charges/biaya berobat lebih tinggi dibading pasien yg tidak merokok. Untuk fitur region, perbedaan biaya berobat juga tidak terlalu tinggi antar region.

Cek korelasi antar data
"""

sns.pairplot(insurance, diag_kind='kde')

insurance.corr()['charges']

plt.figure(figsize=(12, 8))
corr = insurance.corr().round(2)
sns.heatmap(data=corr, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("correlation", size=20)

"""Data memiliki korelasi yg cukup rendah antar fitur nya

Encoding Fitur Kategori
"""

insurance = pd.concat([insurance, pd.get_dummies(insurance['sex'], prefix='sex')], axis=1)
insurance = pd.concat([insurance, pd.get_dummies(insurance['smoker'], prefix='smoker')], axis=1)
insurance = pd.concat([insurance, pd.get_dummies(insurance['region'], prefix='region')], axis=1)

"""Lihat kembali korelasi antar fitur setelah fitur non-numerik di encoding"""

plt.figure(figsize=(12, 8))
corr = insurance.corr().round(2)
sns.heatmap(data=corr, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("correlation", size=20)

"""Dapat terlihat bahwa biaya rumah sakit sangat dipengaruhi oleh perokok atau tidak nya seorang pasien"""

insurance.drop(['sex', 'smoker', 'region'], axis=1, inplace=True)

insurance.info()

insurance.head()

X = insurance.drop(['charges'], axis=1)

X

x_test = X.drop(['region_northeast', 'region_northwest', 'region_southeast', 'region_southwest'], axis=1)

x_test

"""Pisahkan label"""

y = insurance['charges']

"""Bagi data train dan data test"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=100)

"""cek data"""

print(f'total # of sample in whole dataset: {len(X)}')
print(f'total # of sample in whole dataset: {len(X_train)}')
print(f'total # of sample in whole dataset: {len(X_test)}')

"""Normalisasi data dengan StandardScaler"""

numerical_features = ['age', 'bmi', 'children']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])

scaler.fit(X_test[numerical_features])
X_test[numerical_features] = scaler.transform(X_test.loc[:, numerical_features])

y_train.head()

X_train[numerical_features].tail()

X_train[numerical_features].describe().round(4)

"""Buat dataframe untuk menampung nilai mse"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RF'])

"""Model KNN"""

knn = KNeighborsRegressor(n_neighbors=15)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""Model Random Forest"""

RF = RandomForestRegressor(n_estimators=100, max_depth=16, random_state=100, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RF'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Buat dataframe"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF'])

"""Buat dictionary untuk dataframe"""

model_dict = {'KNN': knn, 'RF': RF}

"""Hitung nilai MSE"""

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

"""Prediksi 10 nilai"""

prediksi = X_test.iloc[:10].copy()
pred_dict = {'y_true':y_test[:10]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""Hitung R2 score"""

forest_test_pred = RF.predict(X_test)
knn_test_pred = knn.predict(X_test)

print("R2 score random forest : ", r2_score(y_test, forest_test_pred))
print("R2 score KNN : ", r2_score(y_test, knn_test_pred))

"""dapat dilihat r2 score sekitar 0.86 pada model Random Forest sedangkan pada model KNN didapatkan r2 score sekitar 0.71. Sehingga di dapatkan bahwa model Random Forest lebih lebih baik daripada KNN pada prediksi studi kasus ini"""